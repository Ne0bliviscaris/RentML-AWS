name: Deploy Streamlit to EC2

on:
  push:
    branches: [ main ]
    paths:
      - 'streamlit/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_TAG: rentml-streamlit

jobs:
  deploy-streamlit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create EC2 instance if needed
      id: get-instance
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${{ env.EC2_INSTANCE_TAG }}" \
                   "Name=instance-state-name,Values=running,stopped" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text 2>/dev/null || echo "None")
        
        if [ "$INSTANCE_ID" = "None" ] || [ "$INSTANCE_ID" = "null" ]; then
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c02fb55956c7d316 \
            --instance-type t2.micro \
            --key-name vockey \
            --security-groups default \
            --iam-instance-profile Name=LabInstanceProfile \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ env.EC2_INSTANCE_TAG }}}]" \
            --user-data '#!/bin/bash
              yum update -y
              yum install -y python3 pip git
              pip3 install streamlit boto3
              cd /home/ec2-user
              git clone https://github.com/Dragon863/RentML-AWS.git
              cd RentML-AWS/streamlit
              nohup streamlit run app.py --server.port 8501 --server.address 0.0.0.0 &' \
            --query "Instances[0].InstanceId" \
            --output text)
          
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        fi
        
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
    
    - name: Deploy to EC2
      run: |
        aws ssm send-command \
          --instance-ids ${{ steps.get-instance.outputs.instance_id }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["cd /home/ec2-user/RentML-AWS","git pull","pkill -f streamlit","cd streamlit","nohup streamlit run app.py --server.port 8501 --server.address 0.0.0.0 &"]' \
          2>/dev/null || echo "SSM not available, instance created"